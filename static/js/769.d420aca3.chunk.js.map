{"version":3,"file":"static/js/769.d420aca3.chunk.js","mappings":"2RAEMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,sGACLL,EAASM,IAAI,qBADR,uBACpBC,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAa,mCAAG,WAAMC,GAAN,yFACJT,EAASM,IAAT,iBAAuBG,IADnB,uBACnBF,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbG,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNQ,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,sDASdK,EAAO,mCAAG,WAAOH,EAAIN,GAAX,yFACEH,EAASM,IAAT,iBAAuBG,EAAvB,YAA6BN,IAD/B,uBACbI,EADa,EACbA,KADa,kBAEdA,GAFc,2CAAH,uD,mKC1BPM,EAASC,EAAAA,GAAAA,EAAH,iEAKNC,EAAOD,EAAAA,GAAAA,GAAH,0E,SC+BjB,EAhCgB,WACd,OAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQX,GAAOY,EAAAA,EAAAA,MAAPZ,IAERa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,gHAEUX,EAAAA,EAAAA,IAAQH,EAAI,WAFtB,gBAERe,EAFQ,EAERA,QACRN,EAAUM,GAHM,gDAKhBJ,EAAS,EAAD,IALQ,yDAAH,qDAQjBG,GACD,GAAE,CAACd,IAEJ,IAAMgB,EAAQR,EAAOS,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAQnB,EAApB,EAAoBA,GAApB,OACvB,UAACM,EAAD,YACE,SAACF,EAAD,UAASe,KACT,uBAAID,MAFKlB,EADY,IAOzB,OACE,0BACGU,IAAS,+KACTM,IAGN,C","sources":[" services/API.js","components/reviews/Reviews.styled.jsx","components/reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a473b0cd927768e20ae22a6477d6f386',\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getSearchMovie = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getInfo = async (id, params) => {\n  const { data } = await instance.get(`/movie/${id}/${params}`);\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const Author = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport const Item = styled.li`\n  padding: 15px 0;\n  border: 1px solid #e5e5e5;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getInfo } from ' services/API';\n\nimport { Author, Item } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [review, setReview] = useState([]);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchReview = async () => {\n      try {\n        const { results } = await getInfo(id, 'reviews');\n        setReview(results);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchReview();\n  }, [id]);\n\n  const items = review.map(({ content, author, id }) => (\n    <Item key={id}>\n      <Author>{author}</Author>\n      <p>{content}</p>\n    </Item>\n  ));\n\n  return (\n    <ul>\n      {error && <p>Не удалось загрузить отзывы</p>}\n      {items}\n    </ul>\n  );\n};\n\nexport default Reviews;\n"],"names":["instance","axios","baseURL","params","api_key","getTrendMovies","get","data","getMoviesById","id","getSearchMovie","query","getInfo","Author","styled","Item","useState","review","setReview","error","setError","useParams","useEffect","fetchReview","results","items","map","content","author"],"sourceRoot":""}