{"version":3,"file":"static/js/519.484d8df7.chunk.js","mappings":"2RAEMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,sGACLL,EAASM,IAAI,qBADR,uBACpBC,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAa,mCAAG,WAAMC,GAAN,yFACJT,EAASM,IAAT,iBAAuBG,IADnB,uBACnBF,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbG,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNQ,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,sDASdK,EAAO,mCAAG,WAAOH,EAAIN,GAAX,yFACEH,EAASM,IAAT,iBAAuBG,EAAvB,YAA6BN,IAD/B,uBACbI,EADa,EACbA,KADa,kBAEdA,GAFc,2CAAH,uD,mKC1BPM,EAAOC,EAAAA,GAAAA,GAAH,wFAMJC,EAAcD,EAAAA,GAAAA,GAAH,4G,SCoCxB,EAvCa,WACX,OAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQX,GAAOY,EAAAA,EAAAA,MAAPZ,IACRa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,sGAEdH,EAAS,MAFK,UAGSR,EAAAA,EAAAA,IAAQH,EAAI,WAHrB,gBAGNe,EAHM,EAGNA,KACRN,EAAYM,GAJE,gDAMdJ,EAAS,EAAD,IANM,yDAAH,qDASfG,GACD,GAAE,CAACL,EAAaT,IAEjB,IAAMgB,EAAWR,EAASS,KACxB,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,aAA7B,OACE,UAACf,EAAD,YACE,gBACEgB,IAAKD,GAAY,yCAAsCA,GACvDE,IAAKJ,KAEP,uBAAIA,KACJ,uCAAeC,OANCF,EADpB,IAYF,OACE,UAACd,EAAD,WACGM,IAAS,0NACTM,IAGN,C","sources":[" services/API.js","components/cast/Cast.styled.jsx","components/cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a473b0cd927768e20ae22a6477d6f386',\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getSearchMovie = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getInfo = async (id, params) => {\n  const { data } = await instance.get(`/movie/${id}/${params}`);\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const ListElement = styled.li`\n  margin: 10px;\n  border: 1px gray solid;\n  padding: 5px;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getInfo } from ' services/API';\nimport { List, ListElement } from './Cast.styled';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setError(null);\n        const { cast } = await getInfo(id, 'credits');\n        setCastInfo(cast);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchCast();\n  }, [setCastInfo, id]);\n\n  const elements = castInfo.map(\n    ({ cast_id, name, character, profile_path }) => (\n      <ListElement key={cast_id}>\n        <img\n          src={profile_path && `https://image.tmdb.org/t/p/w500${profile_path}`}\n          alt={name}\n        />\n        <p>{name}</p>\n        <p>Character: {character}</p>\n      </ListElement>\n    )\n  );\n\n  return (\n    <List>\n      {error && <p>Не удалось загрузить список актёров</p>}\n      {elements}\n    </List>\n  );\n};\n\nexport default Cast;\n"],"names":["instance","axios","baseURL","params","api_key","getTrendMovies","get","data","getMoviesById","id","getSearchMovie","query","getInfo","List","styled","ListElement","useState","castInfo","setCastInfo","error","setError","useParams","useEffect","fetchCast","cast","elements","map","cast_id","name","character","profile_path","src","alt"],"sourceRoot":""}