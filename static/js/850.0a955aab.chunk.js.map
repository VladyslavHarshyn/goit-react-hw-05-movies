{"version":3,"file":"static/js/850.0a955aab.chunk.js","mappings":"2RAEMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,sGACLL,EAASM,IAAI,qBADR,uBACpBC,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAa,mCAAG,WAAMC,GAAN,yFACJT,EAASM,IAAT,iBAAuBG,IADnB,uBACnBF,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbG,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNQ,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,sDASdK,EAAO,mCAAG,WAAOH,EAAIN,GAAX,yFACEH,EAASM,IAAT,iBAAuBG,EAAvB,YAA6BN,IAD/B,uBACbI,EADa,EACbA,KADa,kBAEdA,GAFc,2CAAH,uD,8KC1BPM,EAAMC,EAAAA,GAAAA,IAAH,mSAcHC,EAAaD,EAAAA,GAAAA,KAAH,+KAUVE,EAASF,EAAAA,GAAAA,OAAH,4W,SCpBbG,EAAc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACfC,GAAWC,EAAAA,EAAAA,MAEXC,EAAKH,EAAMI,KAAI,gBAAGb,EAAH,EAAGA,GAAIc,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACnB,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMP,GAAYQ,GAAE,kBAAalB,GAAhD,SACGc,GAASC,KAFLf,EADU,IAQrB,OAAO,wBAAKY,GACb,EAyCD,EAvCe,WACb,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOH,EAAP,KAAcI,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAIF,EAAa3B,IAAI,UAE3B8B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,sGAEjBN,EAAS,MAFQ,UAGSrB,EAAAA,EAAAA,IAAeyB,GAHxB,gBAGTG,EAHS,EAGTA,QACRT,EAASS,GAJQ,gDAMjBP,EAAS,EAAD,IANS,yDAAH,qDASdI,GACFE,GAEH,GAAE,CAACR,EAAUM,IAQd,OACE,UAACtB,EAAD,WACGiB,IAAS,0KACV,UAACf,EAAD,CAAYwB,SATC,SAAAC,GACfA,EAAEC,iBACF,IAAM9B,EAAQ6B,EAAEE,OAAOC,MAAMC,MAC7BV,EAAgB,CAAEvB,MAAAA,GACnB,EAKG,WACE,kBAAOa,KAAK,QAAQqB,KAAK,UACzB,SAAC7B,EAAD,CAAQ6B,KAAK,SAAb,wBAEF,SAAC5B,EAAD,CAAaC,MAAOO,MAGzB,C","sources":[" services/API.js","components/search/Search.styled.jsx","components/search/Search.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a473b0cd927768e20ae22a6477d6f386',\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getSearchMovie = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getInfo = async (id, params) => {\n  const { data } = await instance.get(`/movie/${id}/${params}`);\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  min-height: 64px;\n  max-width: 800px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  border-radius: 0 0 25px 25px;\n  color: #fff;\n  background-color: rgb(200, 200, 20);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 400px;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-color: rgb(225, 255, 0);\n  border-radius: 20px;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\nimport { getSearchMovie } from ' services/API';\n\nimport { Box, SearchForm, Button } from './Search.styled';\n\nconst SearchMovie = ({ items }) => {\n  const location = useLocation();\n\n  const el = items.map(({ id, title, name }) => (\n    <li key={id}>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        {title || name}\n      </Link>\n    </li>\n  ));\n\n  return <ul>{el}</ul>;\n};\n\nconst Search = () => {\n  const [state, setState] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const q = searchParams.get('query');\n\n  useEffect(() => {\n    const searchOfName = async () => {\n      try {\n        setError(null);\n        const { results } = await getSearchMovie(q);\n        setState(results);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    if (q) {\n      searchOfName();\n    }\n  }, [setState, q]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const query = e.target.input.value;\n    setSearchParams({ query });\n  };\n\n  return (\n    <Box>\n      {error && <p>Не удалось загрузить фильм</p>}\n      <SearchForm onSubmit={onSubmit}>\n        <input name=\"input\" type=\"text\" />\n        <Button type=\"submit\">Search</Button>\n      </SearchForm>\n      <SearchMovie items={state} />\n    </Box>\n  );\n};\n\nexport default Search;\n"],"names":["instance","axios","baseURL","params","api_key","getTrendMovies","get","data","getMoviesById","id","getSearchMovie","query","getInfo","Box","styled","SearchForm","Button","SearchMovie","items","location","useLocation","el","map","title","name","state","from","to","useState","setState","error","setError","useSearchParams","searchParams","setSearchParams","q","useEffect","searchOfName","results","onSubmit","e","preventDefault","target","input","value","type"],"sourceRoot":""}